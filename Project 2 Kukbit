Task List: Design a task list application where users can add, edit, and remove tasks. 

Tasks can have due dates and priorities, and users can sort and filter tasks.

import java.util.*;

class Task {
    private String description;
    private Date dueDate;
    private int priority;

    public Task(String description, Date dueDate, int priority) {
        this.description = description;
        this.dueDate = dueDate;
        this.priority = priority;
    }

    public String getDescription() {
        return description;
    }

    public Date getDueDate() {
        return dueDate;
    }

    public int getPriority() {
        return priority;
    }
}

class TaskList {
    private List<Task> tasks = new ArrayList<>();

    public void addTask(Task task) {
        tasks.add(task);
    }

    public void editTask(int index, Task updatedTask) {
        if (index >= 0 && index < tasks.size()) {
            tasks.set(index, updatedTask);
            System.out.println("Task updated successfully!");
        } else {
            System.out.println("Invalid task index.");
        }
    }

    public void removeTask(int index) {
        if (index >= 0 && index < tasks.size()) {
            tasks.remove(index);
            System.out.println("Task removed successfully!");
        } else {
            System.out.println("Invalid task index.");
        }
    }

    public void sortTasks() {
        tasks.sort(Comparator.comparing(Task::getDueDate).thenComparing(Task::getPriority));
    }

    public void viewTasks() {
        if (tasks.isEmpty()) {
            System.out.println("No tasks available.");
        } else {
            System.out.println("Task List:");
            for (int i = 0; i < tasks.size(); i++) {
                Task task = tasks.get(i);
                System.out.println((i + 1) + ". " + task.getDescription() +
                        " - Due: " + task.getDueDate() +
                        ", Priority: " + task.getPriority());
            }
        }
    }
}

public class TaskListApplication {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskList taskList = new TaskList();

        while (true) {
            System.out.println("1. Add Task\n2. Edit Task\n3. Remove Task\n4. Sort Tasks\n5. View Tasks\n6. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    addTask(scanner, taskList);
                    break;
                case 2:
                    editTask(scanner, taskList);
                    break;
                case 3:
                    removeTask(scanner, taskList);
                    break;
                case 4:
                    taskList.sortTasks();
                    System.out.println("Tasks sorted successfully!");
                    break;
                case 5:
                    taskList.viewTasks();
                    break;
                case 6:
                    System.out.println("Exiting program. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid option. Please choose a valid option.");
            }
        }
    }

    private static void addTask(Scanner scanner, TaskList taskList) {
        System.out.print("Enter task description: ");
        String description = scanner.nextLine();
        System.out.print("Enter due date (yyyy-MM-dd): ");
        String dateString = scanner.nextLine();
        Date dueDate = parseDate(dateString);
        System.out.print("Enter priority (1 - High, 2 - Medium, 3 - Low): ");
        int priority = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        Task task = new Task(description, dueDate, priority);
        taskList.addTask(task);
        System.out.println("Task added successfully!");
    }

    private static void editTask(Scanner scanner, TaskList taskList) {
        taskList.viewTasks();
        System.out.print("Enter the index of the task to edit: ");
        int index = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        System.out.print("Enter new task description: ");
        String description = scanner.nextLine();
        System.out.print("Enter new due date (yyyy-MM-dd): ");
        String dateString = scanner.nextLine();
        Date dueDate = parseDate(dateString);
        System.out.print("Enter new priority (1 - High, 2 - Medium, 3 - Low): ");
        int priority = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        Task updatedTask = new Task(description, dueDate, priority);
        taskList.editTask(index - 1, updatedTask);
    }

    private static void removeTask(Scanner scanner, TaskList taskList) {
        taskList.viewTasks();
        System.out.print("Enter the index of the task to remove: ");
        int index = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        taskList.removeTask(index - 1);
    }

    private static Date parseDate(String dateString) {
        try {
            return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please use yyyy-MM-dd.");
            return null;
        }
    }
}
